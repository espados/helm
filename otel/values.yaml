opentelemetry-collector:
  image:
    repository: "otel/opentelemetry-collector-contrib"
    tag: "0.108.0"
  fullnameOverride: "otel-collector-opentelemetry-collector"
  mode: deployment
  useGOMEMLIMIT: true
  config:
    extensions:
      zpages:
      health_check: { }
    exporters:
      otlp/2:
        endpoint: jaeger-collector.jaeger:4317
        tls:
          insecure: true
      prometheus:
        endpoint: ${env:MY_POD_IP}:8889
      otlp:
        endpoint: http://logstash.internal.modelbank.dcore.din.global:3030
        tls:
          insecure: true
      debug:
        verbosity: detailed

    service:
      extensions:
        - zpages
        - health_check
      telemetry:
        logs:
          level: debug
      pipelines:
        traces:
          processors:
            - resource
            - memory_limiter
            - batch
          exporters:
            - otlp/2
        metrics:
          receivers:
            - prometheus
            - otlp
          processors:
            - resource
            - memory_limiter
            - batch
          exporters:
            - otlp
            - prometheus
            - debug

    processors:
      batch: {}
      # Default memory limiter configuration for the collector based on k8s resource limits.
      memory_limiter:
        # check_interval is the time between measurements of memory usage.
        check_interval: 5s
        # By default limit_mib is set to 80% of ".Values.resources.limits.memory"
        limit_percentage: 80
        # By default spike_limit_mib is set to 25% of ".Values.resources.limits.memory"
        spike_limit_percentage: 25
      resource:
        attributes:
          - key: deployment.environment
            action: insert
            value: dglobal-aws-modelbank

    receivers:
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 60s
              static_configs:
                - targets:
                    - ${env:MY_POD_IP}:8888
            - job_name: redis
              scrape_interval: 30s
              static_configs:
                - targets:
                    - redis-metrics.redis.svc.cluster.local:9121
            - job_name: 'pulsar'
              scrape_interval: 30s
              static_configs:
                - targets:
                    - pulsar-broker.pulsar.svc.cluster.local:8080
                    - pulsar-bookie.pulsar.svc.cluster.local:8000
                  
  ports:
    metrics:
      enabled: true
    prometheus:
      enabled: true
      containerPort: 8889
      servicePort: 8889
      hostPort: 8889
      protocol: TCP

  # required for metrics pull mechanism of prometheus
  serviceMonitor:
    enabled: true
    
    extraLabels:
      release: prometheus

  clusterRole:
    create: true
    annotations: {}
    name: "open-telemetry-discover-service"
    rules:
      - apiGroups:
          - ''
        resources:
          - 'services'
        verbs:
          - 'get'
          - 'list'
          - 'watch'

    clusterRoleBinding:
      annotations: {}
      name: "open-telemetry-collector"

